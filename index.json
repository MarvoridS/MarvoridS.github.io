
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Интересуюсь различными профессиями и хочу попробовать себя в них. Постоянно ищу что то новое и развиваюсь.\n","date":1681084800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1681084800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Интересуюсь различными профессиями и хочу попробовать себя в них. Постоянно ищу что то новое и развиваюсь.","tags":null,"title":"Марворид Сабралиева","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Марворид Сабралиева"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview На прошлой неделе я отравилась и не могла посещать занятия два дня. Всю прошлую неделю я готовилась к контрольным по математическому анализу и математической логике из за чего плохо спала. после того как я написала контрольные я решила отметить данное событие и порадовала себя походом в ресторан. Там я вкусно покушала и расслабилась после всей этой сумматохи ","date":1681084800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681084800,"objectID":"e353871dd05f1a0ecac262c154be1b71","permalink":"https://example.com/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2023-04-10T00:00:00Z","relpermalink":"/post/getting-started-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Как я провела прошлую неделю","tags":["Academic"],"title":"Как я провела прошлую неделю","type":"post"},{"authors":["Марворид Сабралиева"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview На прошлой неделе я выполняла лабораторную работу №5. При выполнении я изучила анализ файловой структуры UNIX и команды для работы с файлами и каталогами. На прошлой неделе было 8 марта и мы с сестрой купили маме и бабушке цветы 10 числа мы с моей группой пели и танцевали на английском языке. во время выступления у нас отключились микрофоны, поэтому нам было смешно и стыдно одновременно. ","date":1678406400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678406400,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://example.com/post/getting-started/","publishdate":"2023-03-10T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Как я провела прошлую неделю","tags":["Academic"],"title":"Как я провела прошлую неделю","type":"post"},{"authors":["Марворид Сабралиева"],"categories":["Demo"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview На прошлой неделе меня выписали с больничного и я вернулась к учебе в университете\nЯ сходила на день рождение своей подруги. Она пригласила нас играть в бильярд. До этого я не умела играть, но она меня научила и мы хорошо провели время. потом мы пошли к ней домой и покушали очень вкусный чизкейк из вкусвила и посмотрели фильм.\nЯ сходила домой к своей подруге, с которой мы давно не виделись. Мы посмотрели фильм который я давно хотела посмотреть, много болтали и даже успели спеть вместе.\n","date":1678406400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678406400,"objectID":"3897ba3110858b1ae10b1e16efbd41e2","permalink":"https://example.com/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"2023-03-10T00:00:00Z","relpermalink":"/post/getting-started-%D0%B4%D1%80%D1%83%D0%B3%D0%B0%D1%8F-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Как я провела прошлую неделю","tags":["Academic"],"title":"моя неделя","type":"post"},{"authors":["Марворид Сабралиева"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://example.com/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Марворид Сабралиева"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://example.com/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Мы часто обмениваемся фотографиями. Иногда на самой фотографии обозначена дата съемки, если фотограф захотел, чтобы она отображалась. И это максимум, что мы можем узнать о том, где и когда была произведена съемка? Оказывается, что нет. Каждая фотография хранит информацию не только о камере, на которую она была сделана, но и даже о месте. Как же добыть эти сведения? Фото: Unplash Фото: Unplash\nМетаданные — это данные EXIF, которые автоматически приписываются вашей фотографии, неважно, сделана она на фотоаппарат, или на смартфон, или даже на камеру ноутбука. Метаданные не видно невооруженным взглядом, но их легко обнаружить, если знать, каким инструментом воспользоваться. И, конечно, если они не были стерты. Реклама\nВ метаданные фотографии снимка входят: размер, технические характеристики, аппарат, на который снята фотография, причем можно посмотреть производилась съемка на фронтальную камеру или заднюю, геолокация съемки (в формате широты и долготы) и дата.\nСамый простой способ — это залезть в свойства фотографии. Чаще всего, нажав правой кнопкой мышки на иконку нужного вам фото, вы обнаружите в меню раздел «свойства» и в открывшемся окне будут ваши данные. Аналогичным образом можно посмотреть данные в стандартных программах для просмотра иллюстраций, таких как Adobe Lightroom, Adobe Photoshop, Adobe Bridge.\nЕсли у вас нет такой возможности, на помощь придут онлайн-сервисы. Сайтов, на которых можно выудить из фото все данные много. Один из таких http://exif.regex.info/exif.cgi. Вы загружаете в форму фотографию или ссылку на нее, подтверждаете, что вы не робот и получаете максимально подробное описание фотографии. Программа может даже посчитать расстояние от камеры в момент съемки, и в какую сторону света она была направлена.\nНо предположим, вы, напротив, не хотите, чтобы фотография сохранила ваши данные. Для этих целей также есть онлайн-сервисы. Например, https://www.imgonline.com.ua/. Пропускаете иллюстрацию через систему и все данные с фото стерты. Остается только информация о размере снимка и какие-то цветовые характеристики.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://example.com/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"В мире digital нет никаких тайн, узнать можно все о чем угодно. Например, легко выяснить, где и когда вы сделали фотографию. Нужно только уметь добыть эти данные. `external_link`.","tags":["Demo"],"title":"Какую информацию можно вынуть из фотографии","type":"project"},{"authors":null,"categories":null,"content":"История создания Начало развития виртуальной реальности можно считать 50-е годы прошлого столетия. В этот период профессором Мортоном Хейлигом был разработан первый 3D-дисплей, который предназначался для просмотра видео. Считается, что самый первый шлем виртуальной реальности в 1968 году создал Айвен Сазерленд и Боб Спроул. Так в конце 80-х годов уже и игровая индустрия подошла к подобию виртуальных игр. В 90-х разрабатывалось очень много устройств, которые были уже похожи на современные очки виртуальной реальности. Так одна из первых таких систем для игр была представлена миру на выставке Computer Graphics в 1990 году Джонатаном Валдерном. Далее они продолжали совершенствоваться и постепенно пришли к тому, что мы видим сегодня. Описание игрушки\nОчки виртуальной реальности представляют собой прямоугольную пластиковую коробку с линзами и специальным отсеком для смартфона и перегородкой с экраном, на которое направляется изображение для каждого глаза человека, именно это и создает эффект присутствия. Некоторые модели очков оснащаются микродисплеями и зеркалами, которые увеличивают угол обзора. Суть аппарата в том, чтобы обмануть мышление и заставить пользователя думать, что он находится совершенно в другом месте. Ключевым элементом в этом случае является концепт присутствия или степень того, насколько ощущается, что человек находится не в виртуальном окружении, а в непосредственном физическом. С помощью гарнитуры и наушников создаётся более реалистичное ощущение погружения в виртуальный мир. Внутри гарнитуры есть два экрана с зоной видимости в 110 градусов каждый, а значит, невозможно увидеть край экрана своим боковым зрением. Каждый экран отображает слегка измененную картинку для правого и, отдельно, левого глаза. Такая уловка называется стереоскопией.\nОчки отличаются друг от друга качеством графики, отсутствием неприятных ощущений или наличием дискомфорта, степенью изоляции от внешнего мира. Очки для смартфонов более компактные, но и менее качественные, насладиться необычной виртуальной реальностью можно в любом месте, качество изображении зависит лишь от производственных возможностей вашего смартфона. Кроме того, такие очки совместимы как с телефоном, так и с компьютером. Очки для игровых консолей не портативны, работают от проводов, подходят лишь для конкретных моделей приставок, совсем мало игр, которые имеют детально проработанную графику, VR-видео в таких очках смотреть не получится. Как играть?\nЧеловек в таких очках способен бегать, прыгать, прикасаться к предметам – он всегда будет находиться в центре происходящих событий. Для более реалистичного ощущения в очках надо фокусировать зрение на одном объекте, потом закрыть левый глаз, открыть его, и закрыть правый. В этот момент можно заметить, что этот объект слегка сместился в сторону. Все потому, что когда открыты оба глаза, мозг человека совмещает исходные данные, чтобы создать единую картинку. В виртуальной реальности две слегка сдвинутые картинки представлены глазам, а остальную работу выполняет мозг. Пользователи виртуальных очков во время игры могут воплощать в жизнь любые свои желания – стать гонщиком или участником любимого фильма, скатиться с американских горок и прыгнуть с парашютом, исследовать дно океана и моментально перенестись в другую страну, прогуляться по безлюдным джунглям в компании диких животных или даже слетать в космос. Плюсы и минусы\nС помощью виртуальных очков можно отлично провести время: попасть в другой город ,страну, оказаться на морском дне или даже отправиться в космос на другую планету и рассмотреть все в мельчайших деталях. Это заряжает людей позитивными эмоциями и поднимает настроение, что положительно влияет на гормональный фон. Однако, нередко люди после применения очков виртуальной реальности, испытывают тошноту. Это может произойти из-за плохой работы вестибулярного аппарата человека. Поэтому есть и отрицательные стороны у этих аксессуаров. Они так же считаются достаточно дорогостоящим удовольствием. Не каждый человек может себе их позволить. Но учитывая их использование в разных крупных сферах деятельности, можно сказать, что они помогают спасать жизни. Например, при проведении операции в медицинских учреждениях. Новый век\nВ наше время очки виртуальной реальности чаще всего используются геймерами в компьютерных играх. В последнее время стало популярно просто просматривать небольшие видеозаписи, созданные с помощью специальной камеры. Применение VR-очков не ограничивается только лишь развлекательными целями. Сегодня применение таких аксессуаров активно используется в обучении. На них современное человечество возлагает большие надежды. Например, такие очки помогут будущим докторам присутствовать на сложной операции, чтобы детально разглядеть операционный процесс профессора, в мельчайших подробностях разглядеть строение тела человека. В сфере бизнеса виртуальные очки помогут заранее заказчикам или покупателям рассмотреть товар или проект, примерить на себя тот или иной предмет гардероба. Могут использоваться очки и …","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://example.com/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"Очки виртуальной реальности – это устройство, помогающее не только просматривать картинки или видео, но и полностью погрузиться в происходящее с помощью 3D-изображений.","tags":["Deep Learning"],"title":"Очки виртуальной реальности","type":"project"},{"authors":["Марворид Сабралиева","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://example.com/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Марворид Сабралиева","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://example.com/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"Эта глава о том, как начать работу с Git. Вначале изучим основы систем контроля версий, затем перейдём к тому, как запустить Git на вашей ОС и окончательно настроить для работы. В конце главы вы уже будете знать, что такое Git и почему им следует пользоваться, а также получите окончательно настроенную для работы систему.\nExamples Что такое «система контроля версий» и почему это важно? Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любых типов файлов.\nЕсли вы графический или web-дизайнер и хотите сохранить каждую версию изображения или макета (скорее всего, захотите), система контроля версий (далее VCS) — как раз то, что нужно. Она позволяет вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял что-то и вызвал проблему, кто поставил задачу и когда и многое другое. Использование VCS также значит в целом, что, если вы сломали что-то или потеряли файлы, вы спокойно можете всё исправить. В дополнение ко всему вы получите всё это без каких-либо дополнительных усилий. Локальные системы контроля версий\nМногие люди в качестве метода контроля версий применяют копирование файлов в отдельный каталог (возможно даже, каталог с отметкой по времени, если они достаточно сообразительны). Данный подход очень распространён из-за его простоты, однако он невероятно сильно подвержен появлению ошибок. Можно легко забыть в каком каталоге вы находитесь и случайно изменить не тот файл или скопировать не те файлы, которые вы хотели.\nДля того, чтобы решить эту проблему, программисты давным-давно разработали локальные VCS с простой базой данных, которая хранит записи о всех изменениях в файлах, осуществляя тем самым контроль ревизий.\nОдной из популярных VCS была система RCS, которая и сегодня распространяется со многими компьютерами. RCS хранит на диске наборы патчей (различий между файлами) в специальном формате, применяя которые она может воссоздавать состояние каждого файла в заданный момент времени. Централизованные системы контроля версий\nСледующая серьёзная проблема, с которой сталкиваются люди, — это необходимость взаимодействовать с другими разработчиками. Для того, чтобы разобраться с ней, были разработаны централизованные системы контроля версий (Centralized Version Control System, далее CVCS). Такие системы, как CVS, Subversion и Perforce, используют единственный сервер, содержащий все версии файлов, и некоторое количество клиентов, которые получают файлы из этого централизованного хранилища. Применение CVCS являлось стандартом на протяжении многих лет.\nТакой подход имеет множество преимуществ, особенно перед локальными VCS. Например, все разработчики проекта в определённой степени знают, чем занимается каждый из них. Администраторы имеют полный контроль над тем, кто и что может делать, и гораздо проще администрировать CVCS, чем оперировать локальными базами данных на каждом клиенте.\nНесмотря на это, данный подход тоже имеет серьёзные минусы. Самый очевидный минус — это единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать контроль версий для сохранения изменений, над которыми работает, а также никто не сможет обмениваться этими изменениями с другими разработчиками. Если жёсткий диск, на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы потеряете всё — всю историю проекта, не считая единичных снимков репозитория, которые сохранились на локальных машинах разработчиков. Локальные VCS страдают от той же самой проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять всё. Распределённые системы контроля версий\nЗдесь в игру вступают распределённые системы контроля версий (Distributed Version Control System, далее DVCS). В DVCS (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто скачивают снимок всех файлов (состояние файлов на определённый момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умрёт, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия репозитория является полным бэкапом всех данных. Более того, многие DVCS могут одновременно взаимодействовать с несколькими удалёнными репозиториями, благодаря этому вы можете работать с различными группами людей, применяя различные подходы единовременно в рамках одного проекта. Это позволяет применять сразу несколько подходов в разработке, например, иерархические модели, что совершенно невозможно в централизованных системах.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://example.com/post/writing-technical-content/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Эта глава о том, как начать работу с Git. Вначале изучим основы систем контроля версий, затем перейдём к тому, как запустить Git на вашей ОС и окончательно настроить для работы. В конце главы вы уже будете знать, что такое Git и почему им следует пользоваться, а также получите окончательно настроенную для работы систему.","tags":null,"title":"Система контроля версий git","type":"post"},{"authors":null,"categories":null,"content":"Examples Формализованный язык, предназначенный для описания программ и алгоритмов решения задач на ЭВМ. Языки программирования являются искусственными. В них синтаксис и семантика строго определены. Поэтому они не допускают свободного толкования выражения, что характерно для естественного языка. Языки программирования разделяются на две основные категории языки высокого уровня и языки низкого уровня :\nЯзык высокого уровня [high-level language] - Язык программирования, средства которого обеспечивают описание задачи в наглядном, легко воспринимаемом виде, удобном для программиста. Он не зависит от внутренних машинных кодов ЭВМ любого типа, поэтому программы, написанные на языках высокого уровня, требуют перевода в машинные коды программами транслятора либо интерпретатора. К языкам высокого уровня относят Фортран , ПЛ/1 , Бейсик , Паскаль , Си , Ада и др. Язык низкого уровня , [low-level language ] - Язык программирования, предназначенный для определенного типа ЭВМ и отражающий его внутренний машинный код (см. ниже также “машинный язык “, “ машинно-ориентированный язык “ и “ язык ассемблера “). Различают также следующие виды языков программирования:\nАлгоритмический язык [algorithmic language ] - Совокупность символов, соглашений и правил, используемых для однозначного описания алгоритмов и обычно являющаяся часть языка программирования ; Неалгоритмический язык [nonalgorithmic language] - Язык программирования, тексты которого не содержат указаний на порядок выполнения операций и служат лишь исходным материалом для синтеза алгоритма решения задачи; Формальный язык [formal language] – Язык программирования, построенный по правилам некоторого логического исчисления или формальной грамматики [formal grammar ], представляющей собой систему правил построения в заданном алфавите конечных знаковых последовательностей, множество которых образует формальный язык; См. “алгоритмический язык “; Исходный язык [source language] - Язык программирования, на котором написана программа, в отличие от машинного языка, на котором программы выполняются компьютером. Исходные языки классифицируются на языки высокого уровня и языки низкого уровня . Машинный ( абсолютный ) язык , язык ЭВМ [computer (machine) language] - Язык программирования, предназначенный для представления программ в форме, обеспечивающей возможность их выполнения техническими средствами; Машинозависимый ( машинно-ориентированный ) язык , машинозависимый язык программирования [computer-sensitive (computer-oriented) language] - Язык программирования, учитывающий структуру и характеристики ЭВМ определенного типа или конкретной ЭВМ; Машиннонезависимый язык [machine-independent language] - Язык программирования, структура и средства которого не связаны ни с какой конкретной ЭВМ и позволяют выполнять составленные на нем программы на любой ЭВМ, снабженной трансляторами (см. ниже) с этого языка; Символический язык , язык символического кодирования [symbolic language] - Язык программирования, ориентированный на конкретные ЭВМ и основанный на кодировании машинных операций при помощи определенного набора символов; Гибридный ( комбинированный ) язык [hibrid language] - Язык программирования, использующий также средства другого языка; Графический язык [graphic language ] - Язык, предназначенный для написания программ машинной графики и пользования ими. Базовый язык [base language] – Машинный язык , общий для семейства ЭВМ; Язык программирования в СУБД с автономным языком . Общий язык [common language] - Машинный язык, общий для группы ЭВМ и используемых ими внешних устройств; Эталонный язык [reference language ] - Язык, являющийся основой для всех его конкретных версий, являющихся вариантами адаптации эталонного языка к определенным условиям применения и назначения; Язык ассемблера , ассемблер [assembler language ] - Универсальный язык программирования , относящийся к категории языков низкого уровня, структура которого определяется форматами команд, данными машинного языка и архитектурой ЭВМ. Используется программистами в тех случаях, когда невозможно применение языка высокого уровня или требуются эффективные программы в машинных кодах. Декларативный ( непроцедурный ) язык [declararative (nonprocedural) language] - Язык программирования, который позволяет задавать связи и отношения между объектами и величинами, но не определяет последовательность выполнения действий (например, языки Пролог , QBE); Императивный ( процедурный ) язык [imperative language] - Язык программирования, который позволяет в явной форме (при помощи задания выполняемых операторов) определять действия и порядок (последовательность) их выполнения; Язык функционального программирования , функциональный язык [functional language] - Декларативный язык программирования, основанный на понятии функций, которые задают зависимость, но не определяют порядок вычислений. Специализированный язык [special language] - Язык программирования, ориентированный на решение определенного круга задач; Язык описания страниц [PDL - …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"bf26a51eedeb393096da5627ebbced8a","permalink":"https://example.com/post/writing-technical-content-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/writing-technical-content-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/","section":"post","summary":"Examples Формализованный язык, предназначенный для описания программ и алгоритмов решения задач на ЭВМ. Языки программирования являются искусственными. В них синтаксис и семантика строго определены. Поэтому они не допускают свободного толкования выражения, что характерно для естественного языка.","tags":null,"title":"Языки научного программирования","type":"post"}]